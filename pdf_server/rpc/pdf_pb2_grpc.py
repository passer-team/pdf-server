# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import pdf_pb2 as pdf__pb2


class PdfStub(object):
    """定义服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.uploadResource = channel.stream_unary(
                '/pdf.Pdf/uploadResource',
                request_serializer=pdf__pb2.Chunk.SerializeToString,
                response_deserializer=pdf__pb2.UploadResourceReply.FromString,
                )
        self.render = channel.unary_unary(
                '/pdf.Pdf/render',
                request_serializer=pdf__pb2.RenderRequest.SerializeToString,
                response_deserializer=pdf__pb2.RenderReply.FromString,
                )
        self.download = channel.unary_stream(
                '/pdf.Pdf/download',
                request_serializer=pdf__pb2.DownloadRequest.SerializeToString,
                response_deserializer=pdf__pb2.Chunk.FromString,
                )


class PdfServicer(object):
    """定义服务
    """

    def uploadResource(self, request_iterator, context):
        """上传pdf要使用到的资源文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def render(self, request, context):
        """将html渲染成pdf
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def download(self, request, context):
        """下载pdf文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PdfServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'uploadResource': grpc.stream_unary_rpc_method_handler(
                    servicer.uploadResource,
                    request_deserializer=pdf__pb2.Chunk.FromString,
                    response_serializer=pdf__pb2.UploadResourceReply.SerializeToString,
            ),
            'render': grpc.unary_unary_rpc_method_handler(
                    servicer.render,
                    request_deserializer=pdf__pb2.RenderRequest.FromString,
                    response_serializer=pdf__pb2.RenderReply.SerializeToString,
            ),
            'download': grpc.unary_stream_rpc_method_handler(
                    servicer.download,
                    request_deserializer=pdf__pb2.DownloadRequest.FromString,
                    response_serializer=pdf__pb2.Chunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pdf.Pdf', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Pdf(object):
    """定义服务
    """

    @staticmethod
    def uploadResource(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/pdf.Pdf/uploadResource',
            pdf__pb2.Chunk.SerializeToString,
            pdf__pb2.UploadResourceReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def render(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pdf.Pdf/render',
            pdf__pb2.RenderRequest.SerializeToString,
            pdf__pb2.RenderReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def download(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pdf.Pdf/download',
            pdf__pb2.DownloadRequest.SerializeToString,
            pdf__pb2.Chunk.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
